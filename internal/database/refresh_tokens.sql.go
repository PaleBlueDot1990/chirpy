// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: refresh_tokens.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createRefreshTokens = `-- name: CreateRefreshTokens :one
INSERT INTO refresh_tokens (token, created_at, updated_at, user_id, expires_at, revoked_at)
VALUES (
    $1,
    NOW(),
    NOW(),
    $2,
    NOW() + INTERVAL '60 days',
    NULL
)
RETURNING token, created_at, updated_at, user_id, expires_at, revoked_at
`

type CreateRefreshTokensParams struct {
	Token  string
	UserID uuid.UUID
}

func (q *Queries) CreateRefreshTokens(ctx context.Context, arg CreateRefreshTokensParams) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, createRefreshTokens, arg.Token, arg.UserID)
	var i RefreshToken
	err := row.Scan(
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.ExpiresAt,
		&i.RevokedAt,
	)
	return i, err
}

const getUserFromRefreshToken = `-- name: GetUserFromRefreshToken :one
SELECT user_id, expires_at, revoked_at FROM refresh_tokens
WHERE token = $1
`

type GetUserFromRefreshTokenRow struct {
	UserID    uuid.UUID
	ExpiresAt time.Time
	RevokedAt sql.NullTime
}

func (q *Queries) GetUserFromRefreshToken(ctx context.Context, token string) (GetUserFromRefreshTokenRow, error) {
	row := q.db.QueryRowContext(ctx, getUserFromRefreshToken, token)
	var i GetUserFromRefreshTokenRow
	err := row.Scan(&i.UserID, &i.ExpiresAt, &i.RevokedAt)
	return i, err
}

const updateRefreshTokenRevokeStatus = `-- name: UpdateRefreshTokenRevokeStatus :exec
UPDATE refresh_tokens
SET updated_at = NOW(), revoked_at = NOW()
WHERE token = $1
`

func (q *Queries) UpdateRefreshTokenRevokeStatus(ctx context.Context, token string) error {
	_, err := q.db.ExecContext(ctx, updateRefreshTokenRevokeStatus, token)
	return err
}
